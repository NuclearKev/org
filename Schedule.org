#+Title: Schedule
# Common Tags: family, friends, car, personal
# Class Tags: EE, SS, ENL, GYM

* School
** TODO Senior project                                                   :SS:
	 I'll be constructing an org-mode file for this.
	 Todo:
	 - [X] Read the relevant info found here: [[~/Downloads/xilinx-iir-hardware.pdf]]
	 - [X] Create an iir-hardware.org file
	 - [X] Write down any relevant information
	 - [X] Start the general outline in VHDL (either for FIR or IIR)
	 - [X] Git repo: https://github.com/nuclearkev/iir-hardware

*** DONE FIR with internal coefficients [OVERDUE]
		DEADLINE: <2017-01-19 Thu>
		I should be able to use the actual XADC with this.
		- [ ] Without pipelining (I think you need to use pipelining due to timing)
		- [X] With pipelining

*** DONE IIR with internal coefficients [AHEAD OF SCHEDULE!]
		DEADLINE: <2017-01-26 Thu>
		Once again, with XADC.
		- [ ] Without pipelining
		- [X] With pipelining

*** TODO Figure out [on paper] generalization of IP
		DEADLINE: <2017-02-09 Thu>
		Basically how can I have any number of coeffs, without have to
		re-synthesize.

		My idea as of now is to have arrays of /huge/ sizes already initialized in
		the design. For example, the coeffs arrays will be of size 30 yet would be
		initialized to zero. Then, then design would go through a bunch of
		multiplications and additions as if there were 30 coeffs. However, any
		unused elements would be zero and the additions/multiplications would be
		completed with zeros. I have yet to test out this theory but it should
		work so long the Zynq has enough registers/LUTs to handle the extreme size
		of the IP.

*** TODO Have a working design with the generalization
		DEADLINE: <2017-02-23 Thu>
		At this point, I should be able to change the number of coeffs *and* their
		values without having to modify the IP.

**** Multi-sections
		 It may be a good idea to also look into using multiple sections for
		 IIRs. It may help with the rippling issues, however, I might just want to
		 keep using single sections for ease of use. Just think about it Kev.


*** TODO Figure out coefficients Zynq->IP
		DEADLINE: <2017-03-02 Thu>
		I'm thinking serial, however, I am not sure how to receive them in the
		IP. Do I need to create a serial controller inside the IP? Instantiate a
		serial controller model inside? Or can I get away with rerouting the input
		value at the falling edge of the clock pulse? See below:

		#+NAME: Serial Receiever
		#+BEGIN_SRC vhdl
		process
		  if(falling_edge(Clk)) then

			-- Shift the data array and feed in the new data
			variable i : integer := 0;
      for i in 0 to 4 loop
        data(i+1) <= data(i);
      end loop;
      data(0) <= data_in;

		end process;
		#+END_SRC

*** TODO Have coefficients shipping
		DEADLINE: <2017-03-30 Thu>
		Maybe have an FSM or something. IDFK

* Work
** TODO Learn JS
	 No real due date but you gotta learn it.

* Extra
** TODO Learn C++
	 Ask Jonny some stuff

** TODO Read Daniel
	 DEADLINE: <2017-01-24 Tue>
